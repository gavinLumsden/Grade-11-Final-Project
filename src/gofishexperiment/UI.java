package gofishexperiment;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * @author g.lumsden
 */
public class UI extends javax.swing.JFrame {

    private final int FORM_HEIGHT = 500;
    private final int FORM_WIDTH = 1150;
    
    private int enemyPairs = 0;
    private int playerPairs = 0;
    
    private Deck deck;
    private Hand playerHand;
    private Hand enemyHand;
    
    private boolean clickable = true;
    
    private int playerSelected = -1;
    private int enemySelected = -1;
    private int playerEmptySpot = -1;
    private int enemyEmptySpot = -1;
    
    private JLabel[] playerLabels;
    private JLabel[] enemyLabels;
    
    private Timer enemyTurn;
    private Timer gameOverCheck;
    private Timer checkForPlayerSelfPairs;
    private Timer checkForEnemySelfPairs;
    private Timer checkForPlayerEmptyHand;
    private Timer checkForEnemyEmptyHand;

    public boolean playerWin = false;
    public boolean enemyWin = false;
    public boolean tie = false;

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        deck = new Deck();
        deck.shuffle();
        playerHand = deck.deal(10);
        enemyHand = deck.deal(10);
        createArrays();
        dealHands();
        setupTimers();
        finalizeUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EnemyCard1 = new javax.swing.JLabel();
        EnemyCard2 = new javax.swing.JLabel();
        PlayerCard1 = new javax.swing.JLabel();
        PlayerCard2 = new javax.swing.JLabel();
        PlayerCard3 = new javax.swing.JLabel();
        PlayerCard4 = new javax.swing.JLabel();
        PlayerCard5 = new javax.swing.JLabel();
        lblPlayerPairs = new javax.swing.JLabel();
        PlayerCard6 = new javax.swing.JLabel();
        PlayerCard7 = new javax.swing.JLabel();
        PlayerCard8 = new javax.swing.JLabel();
        lblEnemyPairs = new javax.swing.JLabel();
        PlayerCard9 = new javax.swing.JLabel();
        PlayerCard10 = new javax.swing.JLabel();
        btnGuess = new javax.swing.JButton();
        EnemyCard11 = new javax.swing.JLabel();
        EnemyCard12 = new javax.swing.JLabel();
        EnemyCard13 = new javax.swing.JLabel();
        EnemyCard14 = new javax.swing.JLabel();
        EnemyCard15 = new javax.swing.JLabel();
        EnemyCard16 = new javax.swing.JLabel();
        EnemyCard17 = new javax.swing.JLabel();
        EnemyCard18 = new javax.swing.JLabel();
        btnMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Go Fish");
        getContentPane().setLayout(null);

        EnemyCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard1);
        EnemyCard1.setBounds(10, 11, 103, 150);

        EnemyCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard2);
        EnemyCard2.setBounds(1000, 10, 103, 150);

        PlayerCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Ace of Spades.gif"))); // NOI18N
        PlayerCard1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PlayerCard1MouseClicked(evt);
            }
        });
        getContentPane().add(PlayerCard1);
        PlayerCard1.setBounds(10, 310, 103, 145);

        PlayerCard2.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\2 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard2);
        PlayerCard2.setBounds(119, 310, 103, 145);

        PlayerCard3.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\3 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard3);
        PlayerCard3.setBounds(228, 310, 103, 145);

        PlayerCard4.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\4 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard4);
        PlayerCard4.setBounds(337, 310, 103, 145);

        PlayerCard5.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\5 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard5);
        PlayerCard5.setBounds(446, 310, 103, 145);

        lblPlayerPairs.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblPlayerPairs.setText("Your Pairs: 0");
        getContentPane().add(lblPlayerPairs);
        lblPlayerPairs.setBounds(10, 260, 520, 56);

        PlayerCard6.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\6 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard6);
        PlayerCard6.setBounds(555, 310, 103, 145);

        PlayerCard7.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\7 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard7);
        PlayerCard7.setBounds(664, 310, 103, 145);

        PlayerCard8.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\8 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard8);
        PlayerCard8.setBounds(773, 310, 103, 145);

        lblEnemyPairs.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblEnemyPairs.setText("Enemy Pairs: 0");
        getContentPane().add(lblEnemyPairs);
        lblEnemyPairs.setBounds(10, 162, 520, 56);

        PlayerCard9.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\9 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard9);
        PlayerCard9.setBounds(882, 310, 103, 145);

        PlayerCard10.setIcon(new javax.swing.ImageIcon("C:\\Users\\g.lumsden\\Desktop\\Cards\\10 of Spades.gif")); // NOI18N
        getContentPane().add(PlayerCard10);
        PlayerCard10.setBounds(991, 310, 103, 145);

        btnGuess.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        btnGuess.setText("Guess");
        btnGuess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuessActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuess);
        btnGuess.setBounds(10, 220, 270, 40);

        EnemyCard11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard11);
        EnemyCard11.setBounds(119, 11, 103, 150);

        EnemyCard12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard12);
        EnemyCard12.setBounds(230, 10, 103, 150);

        EnemyCard13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard13);
        EnemyCard13.setBounds(340, 10, 103, 150);

        EnemyCard14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard14);
        EnemyCard14.setBounds(450, 10, 103, 150);

        EnemyCard15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard15);
        EnemyCard15.setBounds(560, 10, 103, 150);

        EnemyCard16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard16);
        EnemyCard16.setBounds(670, 10, 103, 150);

        EnemyCard17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard17);
        EnemyCard17.setBounds(780, 10, 103, 150);

        EnemyCard18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Back of Card.gif"))); // NOI18N
        getContentPane().add(EnemyCard18);
        EnemyCard18.setBounds(890, 10, 103, 150);

        btnMenu.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        btnMenu.setText("Menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenu);
        btnMenu.setBounds(280, 220, 260, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * when the player guesses a card
     *
     * @param evt when the user clicks the button
     */
    private void btnGuessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuessActionPerformed
        playerHand.cards[playerSelected].image.setBorder(null);
        playerHand.cards[playerSelected].isClicked = false;
        clickable = true;
        playerGuess();
        endPlayerTurn();
    }//GEN-LAST:event_btnGuessActionPerformed

    private void PlayerCard1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlayerCard1MouseClicked

    }//GEN-LAST:event_PlayerCard1MouseClicked

    /**
     * opens a menu
     *
     * @param evt when the user clicks the button
     */
    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        this.setVisible(false);
        Menu menu = new Menu(this);
    }//GEN-LAST:event_btnMenuActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EnemyCard1;
    private javax.swing.JLabel EnemyCard11;
    private javax.swing.JLabel EnemyCard12;
    private javax.swing.JLabel EnemyCard13;
    private javax.swing.JLabel EnemyCard14;
    private javax.swing.JLabel EnemyCard15;
    private javax.swing.JLabel EnemyCard16;
    private javax.swing.JLabel EnemyCard17;
    private javax.swing.JLabel EnemyCard18;
    private javax.swing.JLabel EnemyCard2;
    private javax.swing.JLabel PlayerCard1;
    private javax.swing.JLabel PlayerCard10;
    private javax.swing.JLabel PlayerCard2;
    private javax.swing.JLabel PlayerCard3;
    private javax.swing.JLabel PlayerCard4;
    private javax.swing.JLabel PlayerCard5;
    private javax.swing.JLabel PlayerCard6;
    private javax.swing.JLabel PlayerCard7;
    private javax.swing.JLabel PlayerCard8;
    private javax.swing.JLabel PlayerCard9;
    private javax.swing.JButton btnGuess;
    private javax.swing.JButton btnMenu;
    private javax.swing.JLabel lblEnemyPairs;
    private javax.swing.JLabel lblPlayerPairs;
    // End of variables declaration//GEN-END:variables

    /**
     * makes the UI
     */
    private void finalizeUI() {
        this.setSize(FORM_WIDTH, FORM_HEIGHT);
        this.setResizable(false);
        PlayerCard6.setVisible(false);
        PlayerCard7.setVisible(false);
        PlayerCard8.setVisible(false);
        PlayerCard9.setVisible(false);
        PlayerCard10.setVisible(false);
        EnemyCard15.setVisible(false);
        EnemyCard16.setVisible(false);
        EnemyCard17.setVisible(false);
        EnemyCard18.setVisible(false);
        EnemyCard2.setVisible(false);
        btnGuess.setEnabled(false);
        this.setVisible(true);
    }

    /**
     * deals hands to the enemy and player
     */
    private void dealHands() {
        for (int i = 0; i < playerHand.cards.length; i++) {
            playerHand.cards[i].playerRedraw();
            final int CARD_NUMBER = i;
            playerHand.cards[i].image.addMouseListener(new MouseListener() {
                public void mouseClicked(MouseEvent e) {
                    if (enemyTurn.isRunning() == false) {
                        if (clickable == true) {
                            playerHand.cards[CARD_NUMBER].click();
                            clickable = false;
                            playerSelected = CARD_NUMBER;
                        } else {
                            clickable = false;
                        }
                        btnGuess.setEnabled(true);
                    }
                }

                public void mousePressed(MouseEvent e) {
                }

                public void mouseReleased(MouseEvent e) {
                }

                public void mouseEntered(MouseEvent e) {
                    if (enemyTurn.isRunning() == false) {
                        if (clickable == true) {
                            playerHand.cards[CARD_NUMBER].hover(true);
                        }
                    }
                }

                public void mouseExited(MouseEvent e) {
                    if (clickable == true) {
                        playerHand.cards[CARD_NUMBER].hover(false);
                    }
                }
            });
        }
        for (int i = 0; i < enemyHand.cards.length; i++) {
            enemyHand.cards[i].image.setIcon(new ImageIcon(getClass().getResource("/pictures/" + "Back of Card.gif")));
        }
    }

    /**
     * makes the arrays needed
     */
    private void createArrays() {
        playerHand.cards[0].image = PlayerCard1;
        playerHand.cards[1].image = PlayerCard2;
        playerHand.cards[2].image = PlayerCard3;
        playerHand.cards[3].image = PlayerCard4;
        playerHand.cards[4].image = PlayerCard5;
        playerHand.cards[5].image = PlayerCard6;
        playerHand.cards[6].image = PlayerCard7;
        playerHand.cards[7].image = PlayerCard8;
        playerHand.cards[8].image = PlayerCard9;
        playerHand.cards[9].image = PlayerCard10;
        enemyHand.cards[0].image = EnemyCard1;
        enemyHand.cards[1].image = EnemyCard11;
        enemyHand.cards[2].image = EnemyCard12;
        enemyHand.cards[3].image = EnemyCard13;
        enemyHand.cards[4].image = EnemyCard14;
        enemyHand.cards[5].image = EnemyCard15;
        enemyHand.cards[6].image = EnemyCard16;
        enemyHand.cards[7].image = EnemyCard17;
        enemyHand.cards[8].image = EnemyCard18;
        enemyHand.cards[9].image = EnemyCard2;

        playerLabels = new JLabel[playerHand.cards.length];

        for (int i = 0; i < playerLabels.length; i++) {
            playerLabels[i] = playerHand.cards[i].image;
        }

        enemyLabels = new JLabel[enemyHand.cards.length];

        for (int i = 0; i < enemyHand.cards.length; i++) {
            enemyLabels[i] = enemyHand.cards[i].image;
            enemyHand.cards[i].image.setIcon(new ImageIcon(getClass().getResource("/pictures/" + "Back of Card.gif")));
        }
    }

    /**
     * sets up the timers
     */
    private void setupTimers() {
        enemyTurn = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                enemySelect();
                enemyGuess();
                checkForPlayerSelfPairs.stop();
                checkForEnemySelfPairs.stop();
                endEnemyTurn();
            }
        });
        gameOverCheck = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (playerPairs == 10) {
                    playerWin = true;
                    gameOver();
                } else if (enemyPairs == 10) {
                    enemyWin = true;
                    gameOver();
                }
            }
        });
        checkForPlayerSelfPairs = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < playerHand.cards.length - 1; i++) {
                    for (int j = i + 1; j < playerHand.cards.length; j++) {
                        Card card1 = playerHand.cards[i];
                        Card card2 = playerHand.cards[j];
                        if (card1.image.isVisible() && card2.image.isVisible()) {
                            if (card1.value == card2.value) {
                                playerPairs++;
                                lblPlayerPairs.setText("Your Pairs: " + playerPairs);
                                playerHand.cards[i].image.setVisible(false);
                                playerHand.cards[j].image.setVisible(false);
                                return;
                            }
                        }
                    }
                }
            }
        });
        checkForEnemySelfPairs = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < enemyHand.cards.length - 1; i++) {
                    for (int j = i + 1; j < enemyHand.cards.length; j++) {
                        Card card1 = enemyHand.cards[i];
                        Card card2 = enemyHand.cards[j];
                        if (card1.image.isVisible() && card2.image.isVisible()) {
                            if (card1.value == card2.value) {
                                enemyPairs++;
                                lblEnemyPairs.setText("Enemy Pairs: " + enemyPairs);
                                enemyHand.cards[i].image.setVisible(false);
                                enemyHand.cards[j].image.setVisible(false);
                                return;
                            }
                        }
                    }
                }
            }
        });
        checkForPlayerEmptyHand = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int emptyPlayerHand = 0;
                for (int i = 0; i < playerHand.cards.length; i++) {
                    if (playerHand.cards[i].image.isVisible() == false) {
                        emptyPlayerHand++;
                    }
                }
                if (emptyPlayerHand == 10) {
                    JOptionPane.showMessageDialog(null, "Oh no!"
                            + "\nYou've run out of cards in your hand!"
                            + "\nHere's two more :)");
                    Card card1 = deck.deal();
                    Card card2 = deck.deal();
                    playerHand.cards[0] = card1;
                    playerHand.cards[0].image = playerLabels[0];
                    playerHand.cards[0].playerRedraw();
                    playerHand.cards[0].image.setVisible(true);
                    playerHand.cards[1] = card2;
                    playerHand.cards[1].image = playerLabels[1];
                    playerHand.cards[1].playerRedraw();
                    playerHand.cards[1].image.setVisible(true);
                    emptyPlayerHand = 0;
                }
            }
        });
        checkForEnemyEmptyHand = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int emptyEnemyHand = 0;
                for (int i = 0; i < enemyHand.cards.length; i++) {
                    if (enemyHand.cards[i].image.isVisible() == false) {
                        emptyEnemyHand++;
                    }
                }
                if (emptyEnemyHand == 10) {
                    Card card1 = deck.deal();
                    Card card2 = deck.deal();
                    enemyHand.cards[0] = card1;
                    enemyHand.cards[0].image = enemyLabels[0];
                    enemyHand.cards[0].enemyRedraw();
                    enemyHand.cards[0].image.setVisible(true);
                    enemyHand.cards[1] = card2;
                    enemyHand.cards[1].image = enemyLabels[1];
                    enemyHand.cards[1].enemyRedraw();
                    enemyHand.cards[1].image.setVisible(true);
                    emptyEnemyHand = 0;
                }
            }
        });
        checkForPlayerSelfPairs.start();
        checkForEnemySelfPairs.start();
        checkForPlayerEmptyHand.start();
        checkForEnemyEmptyHand.start();
        gameOverCheck.start();
    }

    /**
     * selects an enemy card
     */
    private void enemySelect() {
        for (int i = 0; i < enemyHand.cards.length; i++) {
            enemySelected = random(0, 9);
            if (enemyHand.cards[enemySelected].image.isVisible() == true) {
                return;
            }
        }
    }

    /**
     * guesses a card for the enemy
     */
    private void enemyGuess() {
        for (int i = 0; i < playerHand.cards.length; i++) {
            if (playerHand.cards[i].value == enemyHand.cards[enemySelected].value) {
                if (playerHand.cards[i].image.isVisible() == true) {
                    enemyPairs++;
                    lblEnemyPairs.setText("Enemy Pairs: " + enemyPairs);
                    playerHand.cards[i].image.setVisible(false);
                    enemyHand.cards[enemySelected].image.setVisible(false);
                    endEnemyTurn();
                    return;
                }
            }
        }
        fillEnemyEmptySpots();
    }

    /**
     * fills any empty spots the enemy hand has
     */
    private void fillEnemyEmptySpots() {
        for (int i = 0; i < enemyHand.cards.length; i++) {
            if (enemyHand.cards[i].image.isVisible() == false) {
                enemyEmptySpot = i;
                Card card = deck.deal();
                if (card == null) {
                    emptyDeck();
                } else {
                    enemyHand.cards[enemyEmptySpot] = card;
                    enemyHand.cards[enemyEmptySpot].image = enemyLabels[enemyEmptySpot];
                    enemyHand.cards[enemyEmptySpot].enemyRedraw();
                    enemyHand.cards[enemyEmptySpot].image.setVisible(true);
                }
                return;
            }
        }
    }

    /**
     * guesses a card for the player
     */
    private void playerGuess() {
        for (int i = 0; i < enemyHand.cards.length; i++) {
            if (enemyHand.cards[i].value == playerHand.cards[playerSelected].value) {
                if (enemyHand.cards[i].image.isVisible() == true) {
                    playerPairs++;
                    lblPlayerPairs.setText("Your Pairs: " + playerPairs);
                    enemyHand.cards[i].image.setVisible(false);
                    playerHand.cards[playerSelected].image.setVisible(false);
                    endPlayerTurn();
                    return;
                }
            }
        }
        fillPlayerEmptySpots();
    }

    /**
     * fills any empty spots for the player
     */
    private void fillPlayerEmptySpots() {
        for (int i = 0; i < playerHand.cards.length; i++) {
            if (playerHand.cards[i].image.isVisible() == false) {
                System.out.println(i);
                playerEmptySpot = i;
                Card card = deck.deal();
                if (card == null) {
                    emptyDeck();
                } else {
                    playerHand.cards[playerEmptySpot] = card;
                    playerHand.cards[playerEmptySpot].image = playerLabels[playerEmptySpot];
                    playerHand.cards[playerEmptySpot].playerRedraw();
                    playerHand.cards[playerEmptySpot].image.setVisible(true);
                }
                return;
            }
        }
    }

    /**
     * ends the player's turn
     */
    private void endPlayerTurn() {
        playerEmptySpot = -1;
        playerSelected = -1;
        btnGuess.setEnabled(false);
        btnMenu.setEnabled(false);
        enemyTurn.start();
    }

    /**
     * ends the enemy's turn
     */
    private void endEnemyTurn() {
        enemyEmptySpot = -1;
        enemySelected = -1;
        btnMenu.setEnabled(true);
        checkForPlayerSelfPairs.start();
        checkForEnemySelfPairs.start();
        enemyTurn.stop();
    }

    /**
     * if you run out of cards it checks to see who wins
     */
    private void emptyDeck() {
        if (playerPairs > enemyPairs) {
            playerWin = true;
            JOptionPane.showMessageDialog(null, "Oh no! "
                    + "\nThe deck has run out of cards!");
            gameOver();
        } else if (enemyPairs > playerPairs) {
            enemyWin = true;
            JOptionPane.showMessageDialog(null, "Oh no! "
                    + "\nThe deck has run out of cards!");
            gameOver();
        } else if (playerPairs == enemyPairs) {
            tie = true;
            JOptionPane.showMessageDialog(null, "Oh no! "
                    + "\nThe deck has run out of cards!");
            gameOver();
        }
    }

    /**
     * ends the game
     */
    private void gameOver() {
        gameOverCheck.stop();
        checkForEnemySelfPairs.stop();
        checkForPlayerSelfPairs.stop();
        checkForEnemyEmptyHand.stop();
        checkForPlayerEmptyHand.stop();
        enemyTurn.stop();
        this.setVisible(false);
        GameOver gameOver = new GameOver(this);
    }

    /**
     * Generates a random number
     *
     * @param low the lowest number in the range
     * @param high the highest number in the range
     * @return the generated number
     */
    private int random(int low, int high) {
        double seed = Math.random();
        double L = (double) low;
        double H = (double) high;
        double number = (H - L + 1) * seed + L;
        int answer = (int) number;
        return answer;
    }

}
